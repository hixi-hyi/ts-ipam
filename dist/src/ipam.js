"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletePoolManager = exports.SummaryPoolManager = exports.ReservedManager = exports.ADDRESS_FORMAT_RANGE = exports.ADDRESS_FORMAT_CIDR = exports.CidrStringToIpAndPrefix = exports.CidrRangeFromCidr = exports.CidrRange = exports.NetworkAddress = exports.NETWORK_BLOCK_192 = exports.NETWORK_BLOCK_172 = exports.NETWORK_BLOCK_10 = exports.NetworkBlock = void 0;
const ipNum = __importStar(require("ip-num"));
const table_1 = require("table");
const MIN_CIDR_PREFIX = 8; // 10.0.0.0/8
const MAX_CIDR_PREFIX = 24; // 192.168.0.0/24
class NetworkBlock {
    constructor(address, prefix) {
        this.address = address;
        this.prefix = prefix;
        this.range = CidrRange(address, prefix);
    }
}
exports.NetworkBlock = NetworkBlock;
exports.NETWORK_BLOCK_10 = new NetworkBlock('10.0.0.0', 8);
exports.NETWORK_BLOCK_172 = new NetworkBlock('172.16.0.0', 12);
exports.NETWORK_BLOCK_192 = new NetworkBlock('192.168.0.0', 16);
class NetworkAddress {
    constructor(range, label, code) {
        this.range = range;
        this.address = range.getFirst().toString();
        this.prefix = Number(range.cidrPrefix.getValue());
        this.label = label;
        this.code = code;
    }
    get cidr() {
        return this.range.toCidrString();
    }
}
exports.NetworkAddress = NetworkAddress;
function CidrRange(address, prefix) {
    const range = new ipNum.IPv4CidrRange(ipNum.IPv4.fromDecimalDottedString(address), ipNum.IPv4Prefix.fromNumber(BigInt(prefix)));
    return range;
}
exports.CidrRange = CidrRange;
function CidrRangeFromCidr(cidr) {
    return ipNum.IPv4CidrRange.fromCidr(cidr);
}
exports.CidrRangeFromCidr = CidrRangeFromCidr;
function CidrStringToIpAndPrefix(cidr) {
    const [address, prefix] = cidr.split('/');
    return [address, Number(prefix)];
}
exports.CidrStringToIpAndPrefix = CidrStringToIpAndPrefix;
exports.ADDRESS_FORMAT_CIDR = 'CIDR';
exports.ADDRESS_FORMAT_RANGE = 'RANGE';
class AbstractManager {
    constructor(block, start, end, config = {}) {
        this.reserved = [];
        this.addressFormat = exports.ADDRESS_FORMAT_CIDR;
        this.block = block;
        this.start = start;
        this.end = end;
        this.addressFormat = config.addressFormat ?? exports.ADDRESS_FORMAT_CIDR;
        this.pool = ipNum.Pool.fromCidrRanges([this.block.range]);
        this.validate();
    }
    validate() {
        if (this.start > this.end) {
            throw new Error('start must be less than or equal to end');
        }
        if (this.start < MIN_CIDR_PREFIX || this.start > MAX_CIDR_PREFIX) {
            throw new Error(`Start must be between ${MIN_CIDR_PREFIX} and ${MAX_CIDR_PREFIX}, inclusive.`);
        }
        if (this.end < MIN_CIDR_PREFIX || this.end > MAX_CIDR_PREFIX) {
            throw new Error(`End must be between ${MIN_CIDR_PREFIX} and ${MAX_CIDR_PREFIX}, inclusive.`);
        }
    }
    formatAddress(address) {
        const range = address.range;
        if (this.addressFormat === exports.ADDRESS_FORMAT_CIDR) {
            return range.toCidrString();
        }
        else {
            return range.toRangeString();
        }
    }
    reserve(cidr, label, code) {
        const [address, prefix] = CidrStringToIpAndPrefix(cidr);
        const range = CidrRange(address, prefix);
        const networkAddress = range.getFirst().toString();
        if (networkAddress !== address) {
            throw new Error(`The address ${address}/${prefix} is not a valid network address. Maybe you meant ${networkAddress}/${prefix}?`);
        }
        if (prefix < this.start || prefix > this.end) {
            throw new Error(`The prefix ${prefix} is not between ${this.start} and ${this.end}, inclusive.`);
        }
        if (code && this.isReserved(code)) {
            throw new Error(`The code ${code} is already reserved.`);
        }
        this.reserved.push(new NetworkAddress(range, label, code));
        const isReserved = this.pool.removeOverlapping(ipNum.RangedSet.fromCidrRange(CidrRangeFromCidr(cidr)));
        if (!isReserved) {
            throw new Error(`Failed to allocate the address range ${cidr}.`);
        }
        return true;
    }
    getReservation(code) {
        if (code === '') {
            return undefined;
        }
        return this.reserved.find((entry) => entry.code === code);
    }
    isReserved(code) {
        if (code === '') {
            return false;
        }
        return this.getReservation(code) !== undefined;
    }
    printCsv() {
        const csv = this.getContents()
            .map((row) => row.join(','))
            .join('\n');
        console.log(csv);
    }
    printTable() {
        console.log((0, table_1.table)(this.getContents(), this.getTableConfig()));
    }
    collectAllNetworkAddresses() {
        const start = CidrRange(this.block.range.getFirst().toString(), this.start);
        const result = [];
        for (let i = this.end; i >= this.start; i--) {
            result.push(...start.splitInto(new ipNum.IPv4Prefix(BigInt(i))).map((range) => new NetworkAddress(range)));
        }
        return result;
    }
}
class ReservedManager extends AbstractManager {
    getTableConfig() {
        return {
            header: {
                content: `Reserved IP Address ${this.block.address}/${this.start}-${this.end}`,
            },
        };
    }
    getContents() {
        const header = ['address', 'label', 'code'];
        const rows = this.reserved
            .sort((a, b) => a.address.localeCompare(b.address))
            .map((entry) => [this.formatAddress(entry), entry.label || '', entry.code || '']);
        return [header, ...rows];
    }
}
exports.ReservedManager = ReservedManager;
class SummaryPoolManager extends AbstractManager {
    getTableConfig() {
        return {
            header: {
                content: `Summary Pool Address ${this.block.address}/${this.start}-${this.end}`,
            },
        };
    }
    getContents() {
        const header = ['address', 'label', 'code'];
        const start = CidrRange(this.block.range.getFirst().toString(), this.start);
        const networkAddresses = [];
        networkAddresses.push(...start.splitInto(new ipNum.IPv4Prefix(BigInt(this.end))).map((range) => new NetworkAddress(range)));
        const pool = ipNum.Pool.fromCidrRanges(networkAddresses.map((entry) => entry.range));
        this.reserved.forEach((entry) => {
            entry.range.splitInto(new ipNum.IPv4Prefix(BigInt(this.end))).forEach((range) => {
                pool.removeOverlapping(ipNum.RangedSet.fromCidrRange(range));
            });
        });
        const rs = pool.aggregate().getRanges();
        const free = [];
        rs.forEach((r) => {
            free.push(new NetworkAddress(r.toCidrRange()));
        });
        const aggregated = [...free, ...this.reserved];
        const rows = aggregated
            .sort((a, b) => Number(a.range.getFirst().getValue() - b.range.getFirst().getValue()))
            .map((entry) => [this.formatAddress(entry), entry.label || '', entry.code || '']);
        return [header, ...rows];
    }
}
exports.SummaryPoolManager = SummaryPoolManager;
class CompletePoolManager extends AbstractManager {
    constructor(block, start, end, config = {}) {
        super(block, start, end, config);
        this.networkAddresses = [];
        this.networkAddresses = this.collectAllNetworkAddresses();
    }
    getTableConfig() {
        return {
            header: {
                content: `Complete Pool Address ${this.block.address}/${this.start}-${this.end}`,
            },
        };
    }
    getContents() {
        const prefixes = Array.from(new Set(this.networkAddresses.map((entry) => entry.prefix)))
            .sort((a, b) => a - b)
            .map((prefix) => `/${prefix}`);
        prefixes.push('label', 'code');
        const ipRows = {};
        this.networkAddresses.forEach((entry) => {
            const rowKey = entry.address;
            if (!ipRows[rowKey]) {
                ipRows[rowKey] = new Array(prefixes.length).fill('');
            }
            const prefixIndex = prefixes.indexOf(`/${entry.prefix}`);
            ipRows[rowKey][prefixIndex] = this.formatAddress(entry);
        });
        this.reserved.forEach((entry) => {
            entry.range.splitInto(new ipNum.IPv4Prefix(BigInt(this.end))).forEach((range) => {
                const rowKey = range.getFirst().toString();
                ipRows[rowKey][prefixes.length - 2] = entry.label || '';
                ipRows[rowKey][prefixes.length - 1] = entry.code || '';
            });
        });
        const rows = Object.values(ipRows);
        return [prefixes, ...rows];
    }
}
exports.CompletePoolManager = CompletePoolManager;
//
//
//export function CollectNetworkAddresses(networkAddress: string, minCidrPrefix: number, maxCidrPrefix: number): NetworkAddress[] {
//  const start = CidrRange(networkAddress, minCidrPrefix);
//  const result = [];
//  for (let i = maxCidrPrefix; i >= minCidrPrefix; i--) {
//    result.push(...start.splitInto(new ipNum.IPv4Prefix(BigInt(i))).map((range) => new NetworkAddress(range)));
//  }
//  return result;
//}
//
//export function findLongestNetworkAddress(addresses: NetworkAddress[]): NetworkAddress[] {
//  if (addresses.length === 0) {
//    return [];
//  }
//
//  let longestPrefix = addresses[0].prefix;
//  for (const ip of addresses) {
//    if (ip.prefix > longestPrefix) {
//      longestPrefix = ip.prefix;
//    }
//  }
//
//  return addresses.filter((ip) => ip.prefix === longestPrefix);
//}
//
//export function PrintTable(networkAddresses: NetworkAddress[]) {
//  const prefixes = Array.from(new Set(networkAddresses.map((entry) => entry.prefix)))
//    .sort((a, b) => a - b) // プレフィックスを昇順に並べ替え
//    .map((prefix) => `/${prefix}`);
//  prefixes.push('reserved');
//
//  const ipRows: Record<string, string[]> = {};
//  networkAddresses.forEach((entry) => {
//    const rowKey = entry.address;
//    if (!ipRows[rowKey]) {
//      ipRows[rowKey] = new Array(prefixes.length).fill('');
//    }
//    if (entry.reserved) {
//      ipRows[rowKey][prefixes.length - 1] = entry.label || '';
//    } else {
//      const prefixIndex = prefixes.indexOf(`/${entry.prefix}`);
//      ipRows[rowKey][prefixIndex] = entry.address;
//    }
//  });
//
//  const rows = Object.values(ipRows);
//
//  const output = table([prefixes, ...rows]);
//  console.log(output);
//}
//
//# sourceMappingURL=data:application/json;base64,